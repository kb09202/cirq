import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import requests
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler

# Récupération des données depuis l'API Binance
def get_crypto_data(symbol='BTCUSDT', interval='1d', limit=1000):
    url = f'https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}'
    response = requests.get(url)
    data = response.json()
    df = pd.DataFrame(data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume', 'close_time', 'quote_asset_volume', 'trades', 'taker_base_vol', 'taker_quote_vol', 'ignore'])
    df['close'] = df['close'].astype(float)
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
    return df[['timestamp', 'close']]

# Préparation des données
crypto_data = get_crypto_data()
scaler = MinMaxScaler()
crypto_data['scaled_close'] = scaler.fit_transform(crypto_data[['close']])

# Création des séquences pour le modèle LSTM
def create_sequences(data, seq_length=60):
    sequences, targets = [], []
    for i in range(len(data) - seq_length):
        sequences.append(data[i:i + seq_length])
        targets.append(data[i + seq_length])
    return np.array(sequences), np.array(targets)

seq_length = 60
data_values = crypto_data['scaled_close'].values
X, y = create_sequences(data_values, seq_length)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Construction du modèle LSTM
model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(seq_length, 1)),
    Dropout(0.2),
    LSTM(50, return_sequences=False),
    Dropout(0.2),
    Dense(25),
    Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X, y, epochs=50, batch_size=32)

# Prédiction sur 2 ans
future_days = 730
temp_input = list(data_values[-seq_length:])
future_predictions = []

for _ in range(future_days):
    x_input = np.array(temp_input[-seq_length:]).reshape(1, seq_length, 1)
    pred = model.predict(x_input, verbose=0)
    future_predictions.append(pred[0][0])
    temp_input.append(pred[0][0])

# Conversion en valeurs réelles
future_predictions = scaler.inverse_transform(np.array(future_predictions).reshape(-1, 1))

# Affichage des résultats
plt.figure(figsize=(12,6))
plt.plot(crypto_data['timestamp'], crypto_data['close'], label='Prix réel')
future_dates = pd.date_range(start=crypto_data['timestamp'].iloc[-1], periods=future_days, freq='D')
plt.plot(future_dates, future_predictions, label='Prédiction', linestyle='dashed')
plt.legend()
plt.show()
